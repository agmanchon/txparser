// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Blockchain Transaction Parser API
 *
 * API for parsing and tracking blockchain transactions with subscription capabilities.
 *
 * API version: 1.0.0
 */

package httpinfragenerated

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TxParserAPIController binds http requests to an api service and writes the service results to the http response
type TxParserAPIController struct {
	service      TxParserAPIServicer
	errorHandler ErrorHandler
}

// TxParserAPIOption for how the controller is set up.
type TxParserAPIOption func(*TxParserAPIController)

// WithTxParserAPIErrorHandler inject ErrorHandler into controller
func WithTxParserAPIErrorHandler(h ErrorHandler) TxParserAPIOption {
	return func(c *TxParserAPIController) {
		c.errorHandler = h
	}
}

// NewTxParserAPIController creates a default api controller
func NewTxParserAPIController(s TxParserAPIServicer, opts ...TxParserAPIOption) *TxParserAPIController {
	controller := &TxParserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TxParserAPIController
func (c *TxParserAPIController) Routes() Routes {
	return Routes{
		"GetCurrentBlock": Route{
			strings.ToUpper("Get"),
			"/txparser/v0/current-block",
			c.GetCurrentBlock,
		},
		"SubscribeAddress": Route{
			strings.ToUpper("Post"),
			"/txparser/v0/subscribe",
			c.SubscribeAddress,
		},
		"GetAddressTransactions": Route{
			strings.ToUpper("Get"),
			"/txparser/v0/transactions/{address}",
			c.GetAddressTransactions,
		},
	}
}

// GetCurrentBlock - Get the last parsed block
func (c *TxParserAPIController) GetCurrentBlock(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCurrentBlock(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SubscribeAddress - Subscribe an address for transaction tracking
func (c *TxParserAPIController) SubscribeAddress(w http.ResponseWriter, r *http.Request) {
	var subscriptionRequestParam SubscriptionRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriptionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubscriptionRequestRequired(subscriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubscriptionRequestConstraints(subscriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SubscribeAddress(r.Context(), subscriptionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAddressTransactions - Get transactions for a specific address
func (c *TxParserAPIController) GetAddressTransactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	addressParam := params["address"]
	if addressParam == "" {
		c.errorHandler(w, r, &RequiredError{"address"}, nil)
		return
	}
	result, err := c.service.GetAddressTransactions(r.Context(), addressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
